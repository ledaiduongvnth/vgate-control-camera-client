// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: multiple_camera_server.proto

#include "multiple_camera_server.pb.h"
#include "multiple_camera_server.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace multiple_camera_server {

static const char* FaceProcessing_method_names[] = {
  "/multiple_camera_server.FaceProcessing/register_images",
  "/multiple_camera_server.FaceProcessing/recognize_face_js",
  "/multiple_camera_server.FaceProcessing/check_connection",
};

std::unique_ptr< FaceProcessing::Stub> FaceProcessing::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FaceProcessing::Stub> stub(new FaceProcessing::Stub(channel));
  return stub;
}

FaceProcessing::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_register_images_(FaceProcessing_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_recognize_face_js_(FaceProcessing_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_check_connection_(FaceProcessing_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FaceProcessing::Stub::register_images(::grpc::ClientContext* context, const ::multiple_camera_server::RegistrationReq& request, ::multiple_camera_server::RegistrationResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_register_images_, context, request, response);
}

void FaceProcessing::Stub::experimental_async::register_images(::grpc::ClientContext* context, const ::multiple_camera_server::RegistrationReq* request, ::multiple_camera_server::RegistrationResp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_register_images_, context, request, response, std::move(f));
}

void FaceProcessing::Stub::experimental_async::register_images(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::multiple_camera_server::RegistrationResp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_register_images_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::multiple_camera_server::RegistrationResp>* FaceProcessing::Stub::Asyncregister_imagesRaw(::grpc::ClientContext* context, const ::multiple_camera_server::RegistrationReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::multiple_camera_server::RegistrationResp>::Create(channel_.get(), cq, rpcmethod_register_images_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::multiple_camera_server::RegistrationResp>* FaceProcessing::Stub::PrepareAsyncregister_imagesRaw(::grpc::ClientContext* context, const ::multiple_camera_server::RegistrationReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::multiple_camera_server::RegistrationResp>::Create(channel_.get(), cq, rpcmethod_register_images_, context, request, false);
}

::grpc::ClientReaderWriter< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>* FaceProcessing::Stub::recognize_face_jsRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>::Create(channel_.get(), rpcmethod_recognize_face_js_, context);
}

void FaceProcessing::Stub::experimental_async::recognize_face_js(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::multiple_camera_server::JSReq,::multiple_camera_server::JSResp>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::multiple_camera_server::JSReq,::multiple_camera_server::JSResp>::Create(stub_->channel_.get(), stub_->rpcmethod_recognize_face_js_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>* FaceProcessing::Stub::Asyncrecognize_face_jsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>::Create(channel_.get(), cq, rpcmethod_recognize_face_js_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>* FaceProcessing::Stub::PrepareAsyncrecognize_face_jsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>::Create(channel_.get(), cq, rpcmethod_recognize_face_js_, context, false, nullptr);
}

::grpc::Status FaceProcessing::Stub::check_connection(::grpc::ClientContext* context, const ::multiple_camera_server::CheckConnectionReq& request, ::multiple_camera_server::CheckConnectionResp* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_check_connection_, context, request, response);
}

void FaceProcessing::Stub::experimental_async::check_connection(::grpc::ClientContext* context, const ::multiple_camera_server::CheckConnectionReq* request, ::multiple_camera_server::CheckConnectionResp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_check_connection_, context, request, response, std::move(f));
}

void FaceProcessing::Stub::experimental_async::check_connection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::multiple_camera_server::CheckConnectionResp* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_check_connection_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::multiple_camera_server::CheckConnectionResp>* FaceProcessing::Stub::Asynccheck_connectionRaw(::grpc::ClientContext* context, const ::multiple_camera_server::CheckConnectionReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::multiple_camera_server::CheckConnectionResp>::Create(channel_.get(), cq, rpcmethod_check_connection_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::multiple_camera_server::CheckConnectionResp>* FaceProcessing::Stub::PrepareAsynccheck_connectionRaw(::grpc::ClientContext* context, const ::multiple_camera_server::CheckConnectionReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::multiple_camera_server::CheckConnectionResp>::Create(channel_.get(), cq, rpcmethod_check_connection_, context, request, false);
}

FaceProcessing::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceProcessing_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceProcessing::Service, ::multiple_camera_server::RegistrationReq, ::multiple_camera_server::RegistrationResp>(
          std::mem_fn(&FaceProcessing::Service::register_images), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceProcessing_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< FaceProcessing::Service, ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>(
          std::mem_fn(&FaceProcessing::Service::recognize_face_js), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FaceProcessing_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FaceProcessing::Service, ::multiple_camera_server::CheckConnectionReq, ::multiple_camera_server::CheckConnectionResp>(
          std::mem_fn(&FaceProcessing::Service::check_connection), this)));
}

FaceProcessing::Service::~Service() {
}

::grpc::Status FaceProcessing::Service::register_images(::grpc::ServerContext* context, const ::multiple_camera_server::RegistrationReq* request, ::multiple_camera_server::RegistrationResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceProcessing::Service::recognize_face_js(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::multiple_camera_server::JSResp, ::multiple_camera_server::JSReq>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FaceProcessing::Service::check_connection(::grpc::ServerContext* context, const ::multiple_camera_server::CheckConnectionReq* request, ::multiple_camera_server::CheckConnectionResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace multiple_camera_server

