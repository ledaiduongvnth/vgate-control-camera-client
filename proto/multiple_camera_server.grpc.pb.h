// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: multiple_camera_server.proto
#ifndef GRPC_multiple_5fcamera_5fserver_2eproto__INCLUDED
#define GRPC_multiple_5fcamera_5fserver_2eproto__INCLUDED

#include "multiple_camera_server.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace multiple_camera_server {

class FaceProcessing final {
 public:
  static constexpr char const* service_full_name() {
    return "multiple_camera_server.FaceProcessing";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status register_images(::grpc::ClientContext* context, const ::multiple_camera_server::RegistrationReq& request, ::multiple_camera_server::RegistrationResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multiple_camera_server::RegistrationResp>> Asyncregister_images(::grpc::ClientContext* context, const ::multiple_camera_server::RegistrationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multiple_camera_server::RegistrationResp>>(Asyncregister_imagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multiple_camera_server::RegistrationResp>> PrepareAsyncregister_images(::grpc::ClientContext* context, const ::multiple_camera_server::RegistrationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multiple_camera_server::RegistrationResp>>(PrepareAsyncregister_imagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>> recognize_face_js(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>>(recognize_face_jsRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>> Asyncrecognize_face_js(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>>(Asyncrecognize_face_jsRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>> PrepareAsyncrecognize_face_js(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>>(PrepareAsyncrecognize_face_jsRaw(context, cq));
    }
    virtual ::grpc::Status check_connection(::grpc::ClientContext* context, const ::multiple_camera_server::CheckConnectionReq& request, ::multiple_camera_server::CheckConnectionResp* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multiple_camera_server::CheckConnectionResp>> Asynccheck_connection(::grpc::ClientContext* context, const ::multiple_camera_server::CheckConnectionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multiple_camera_server::CheckConnectionResp>>(Asynccheck_connectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multiple_camera_server::CheckConnectionResp>> PrepareAsynccheck_connection(::grpc::ClientContext* context, const ::multiple_camera_server::CheckConnectionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::multiple_camera_server::CheckConnectionResp>>(PrepareAsynccheck_connectionRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void register_images(::grpc::ClientContext* context, const ::multiple_camera_server::RegistrationReq* request, ::multiple_camera_server::RegistrationResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void register_images(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::multiple_camera_server::RegistrationResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void recognize_face_js(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::multiple_camera_server::JSReq,::multiple_camera_server::JSResp>* reactor) = 0;
      virtual void check_connection(::grpc::ClientContext* context, const ::multiple_camera_server::CheckConnectionReq* request, ::multiple_camera_server::CheckConnectionResp* response, std::function<void(::grpc::Status)>) = 0;
      virtual void check_connection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::multiple_camera_server::CheckConnectionResp* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multiple_camera_server::RegistrationResp>* Asyncregister_imagesRaw(::grpc::ClientContext* context, const ::multiple_camera_server::RegistrationReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multiple_camera_server::RegistrationResp>* PrepareAsyncregister_imagesRaw(::grpc::ClientContext* context, const ::multiple_camera_server::RegistrationReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>* recognize_face_jsRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>* Asyncrecognize_face_jsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>* PrepareAsyncrecognize_face_jsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multiple_camera_server::CheckConnectionResp>* Asynccheck_connectionRaw(::grpc::ClientContext* context, const ::multiple_camera_server::CheckConnectionReq& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::multiple_camera_server::CheckConnectionResp>* PrepareAsynccheck_connectionRaw(::grpc::ClientContext* context, const ::multiple_camera_server::CheckConnectionReq& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status register_images(::grpc::ClientContext* context, const ::multiple_camera_server::RegistrationReq& request, ::multiple_camera_server::RegistrationResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multiple_camera_server::RegistrationResp>> Asyncregister_images(::grpc::ClientContext* context, const ::multiple_camera_server::RegistrationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multiple_camera_server::RegistrationResp>>(Asyncregister_imagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multiple_camera_server::RegistrationResp>> PrepareAsyncregister_images(::grpc::ClientContext* context, const ::multiple_camera_server::RegistrationReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multiple_camera_server::RegistrationResp>>(PrepareAsyncregister_imagesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>> recognize_face_js(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>>(recognize_face_jsRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>> Asyncrecognize_face_js(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>>(Asyncrecognize_face_jsRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>> PrepareAsyncrecognize_face_js(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>>(PrepareAsyncrecognize_face_jsRaw(context, cq));
    }
    ::grpc::Status check_connection(::grpc::ClientContext* context, const ::multiple_camera_server::CheckConnectionReq& request, ::multiple_camera_server::CheckConnectionResp* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multiple_camera_server::CheckConnectionResp>> Asynccheck_connection(::grpc::ClientContext* context, const ::multiple_camera_server::CheckConnectionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multiple_camera_server::CheckConnectionResp>>(Asynccheck_connectionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multiple_camera_server::CheckConnectionResp>> PrepareAsynccheck_connection(::grpc::ClientContext* context, const ::multiple_camera_server::CheckConnectionReq& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::multiple_camera_server::CheckConnectionResp>>(PrepareAsynccheck_connectionRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void register_images(::grpc::ClientContext* context, const ::multiple_camera_server::RegistrationReq* request, ::multiple_camera_server::RegistrationResp* response, std::function<void(::grpc::Status)>) override;
      void register_images(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::multiple_camera_server::RegistrationResp* response, std::function<void(::grpc::Status)>) override;
      void recognize_face_js(::grpc::ClientContext* context, ::grpc::experimental::ClientBidiReactor< ::multiple_camera_server::JSReq,::multiple_camera_server::JSResp>* reactor) override;
      void check_connection(::grpc::ClientContext* context, const ::multiple_camera_server::CheckConnectionReq* request, ::multiple_camera_server::CheckConnectionResp* response, std::function<void(::grpc::Status)>) override;
      void check_connection(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::multiple_camera_server::CheckConnectionResp* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::multiple_camera_server::RegistrationResp>* Asyncregister_imagesRaw(::grpc::ClientContext* context, const ::multiple_camera_server::RegistrationReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multiple_camera_server::RegistrationResp>* PrepareAsyncregister_imagesRaw(::grpc::ClientContext* context, const ::multiple_camera_server::RegistrationReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>* recognize_face_jsRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>* Asyncrecognize_face_jsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>* PrepareAsyncrecognize_face_jsRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multiple_camera_server::CheckConnectionResp>* Asynccheck_connectionRaw(::grpc::ClientContext* context, const ::multiple_camera_server::CheckConnectionReq& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::multiple_camera_server::CheckConnectionResp>* PrepareAsynccheck_connectionRaw(::grpc::ClientContext* context, const ::multiple_camera_server::CheckConnectionReq& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_register_images_;
    const ::grpc::internal::RpcMethod rpcmethod_recognize_face_js_;
    const ::grpc::internal::RpcMethod rpcmethod_check_connection_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status register_images(::grpc::ServerContext* context, const ::multiple_camera_server::RegistrationReq* request, ::multiple_camera_server::RegistrationResp* response);
    virtual ::grpc::Status recognize_face_js(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::multiple_camera_server::JSResp, ::multiple_camera_server::JSReq>* stream);
    virtual ::grpc::Status check_connection(::grpc::ServerContext* context, const ::multiple_camera_server::CheckConnectionReq* request, ::multiple_camera_server::CheckConnectionResp* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_register_images : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_register_images() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_register_images() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_images(::grpc::ServerContext* context, const ::multiple_camera_server::RegistrationReq* request, ::multiple_camera_server::RegistrationResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregister_images(::grpc::ServerContext* context, ::multiple_camera_server::RegistrationReq* request, ::grpc::ServerAsyncResponseWriter< ::multiple_camera_server::RegistrationResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_recognize_face_js : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_recognize_face_js() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_recognize_face_js() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recognize_face_js(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::multiple_camera_server::JSResp, ::multiple_camera_server::JSReq>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecognize_face_js(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::multiple_camera_server::JSResp, ::multiple_camera_server::JSReq>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_check_connection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_check_connection() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_check_connection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status check_connection(::grpc::ServerContext* context, const ::multiple_camera_server::CheckConnectionReq* request, ::multiple_camera_server::CheckConnectionResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcheck_connection(::grpc::ServerContext* context, ::multiple_camera_server::CheckConnectionReq* request, ::grpc::ServerAsyncResponseWriter< ::multiple_camera_server::CheckConnectionResp>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_register_images<WithAsyncMethod_recognize_face_js<WithAsyncMethod_check_connection<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_register_images : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_register_images() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::multiple_camera_server::RegistrationReq, ::multiple_camera_server::RegistrationResp>(
          [this](::grpc::ServerContext* context,
                 const ::multiple_camera_server::RegistrationReq* request,
                 ::multiple_camera_server::RegistrationResp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->register_images(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_register_images() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_images(::grpc::ServerContext* context, const ::multiple_camera_server::RegistrationReq* request, ::multiple_camera_server::RegistrationResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void register_images(::grpc::ServerContext* context, const ::multiple_camera_server::RegistrationReq* request, ::multiple_camera_server::RegistrationResp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_recognize_face_js : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_recognize_face_js() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackBidiHandler< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>(
          [this] { return this->recognize_face_js(); }));
    }
    ~ExperimentalWithCallbackMethod_recognize_face_js() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recognize_face_js(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::multiple_camera_server::JSResp, ::multiple_camera_server::JSReq>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>* recognize_face_js() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::multiple_camera_server::JSReq, ::multiple_camera_server::JSResp>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_check_connection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_check_connection() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::multiple_camera_server::CheckConnectionReq, ::multiple_camera_server::CheckConnectionResp>(
          [this](::grpc::ServerContext* context,
                 const ::multiple_camera_server::CheckConnectionReq* request,
                 ::multiple_camera_server::CheckConnectionResp* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->check_connection(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_check_connection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status check_connection(::grpc::ServerContext* context, const ::multiple_camera_server::CheckConnectionReq* request, ::multiple_camera_server::CheckConnectionResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void check_connection(::grpc::ServerContext* context, const ::multiple_camera_server::CheckConnectionReq* request, ::multiple_camera_server::CheckConnectionResp* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_register_images<ExperimentalWithCallbackMethod_recognize_face_js<ExperimentalWithCallbackMethod_check_connection<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_register_images : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_register_images() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_register_images() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_images(::grpc::ServerContext* context, const ::multiple_camera_server::RegistrationReq* request, ::multiple_camera_server::RegistrationResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_recognize_face_js : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_recognize_face_js() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_recognize_face_js() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recognize_face_js(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::multiple_camera_server::JSResp, ::multiple_camera_server::JSReq>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_check_connection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_check_connection() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_check_connection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status check_connection(::grpc::ServerContext* context, const ::multiple_camera_server::CheckConnectionReq* request, ::multiple_camera_server::CheckConnectionResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_register_images : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_register_images() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_register_images() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_images(::grpc::ServerContext* context, const ::multiple_camera_server::RegistrationReq* request, ::multiple_camera_server::RegistrationResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestregister_images(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_recognize_face_js : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_recognize_face_js() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_recognize_face_js() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recognize_face_js(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::multiple_camera_server::JSResp, ::multiple_camera_server::JSReq>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestrecognize_face_js(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(1, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_check_connection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_check_connection() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_check_connection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status check_connection(::grpc::ServerContext* context, const ::multiple_camera_server::CheckConnectionReq* request, ::multiple_camera_server::CheckConnectionResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void Requestcheck_connection(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_register_images : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_register_images() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->register_images(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_register_images() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status register_images(::grpc::ServerContext* context, const ::multiple_camera_server::RegistrationReq* request, ::multiple_camera_server::RegistrationResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void register_images(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_recognize_face_js : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_recognize_face_js() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->recognize_face_js(); }));
    }
    ~ExperimentalWithRawCallbackMethod_recognize_face_js() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status recognize_face_js(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::multiple_camera_server::JSResp, ::multiple_camera_server::JSReq>* stream)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* recognize_face_js() {
      return new ::grpc::internal::UnimplementedBidiReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_check_connection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_check_connection() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->check_connection(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_check_connection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status check_connection(::grpc::ServerContext* context, const ::multiple_camera_server::CheckConnectionReq* request, ::multiple_camera_server::CheckConnectionResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void check_connection(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_register_images : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_register_images() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::multiple_camera_server::RegistrationReq, ::multiple_camera_server::RegistrationResp>(std::bind(&WithStreamedUnaryMethod_register_images<BaseClass>::Streamedregister_images, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_register_images() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status register_images(::grpc::ServerContext* context, const ::multiple_camera_server::RegistrationReq* request, ::multiple_camera_server::RegistrationResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedregister_images(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::multiple_camera_server::RegistrationReq,::multiple_camera_server::RegistrationResp>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_check_connection : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_check_connection() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::multiple_camera_server::CheckConnectionReq, ::multiple_camera_server::CheckConnectionResp>(std::bind(&WithStreamedUnaryMethod_check_connection<BaseClass>::Streamedcheck_connection, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_check_connection() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status check_connection(::grpc::ServerContext* context, const ::multiple_camera_server::CheckConnectionReq* request, ::multiple_camera_server::CheckConnectionResp* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status Streamedcheck_connection(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::multiple_camera_server::CheckConnectionReq,::multiple_camera_server::CheckConnectionResp>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_register_images<WithStreamedUnaryMethod_check_connection<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_register_images<WithStreamedUnaryMethod_check_connection<Service > > StreamedService;
};

}  // namespace multiple_camera_server


#endif  // GRPC_multiple_5fcamera_5fserver_2eproto__INCLUDED
