// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: multiple_camera_server.proto

#include "multiple_camera_server.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_multiple_5fcamera_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceInfo_multiple_5fcamera_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_multiple_5fcamera_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabeledFace_multiple_5fcamera_5fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_multiple_5fcamera_5fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnlabeledFace_multiple_5fcamera_5fserver_2eproto;
namespace multiple_camera_server {
class CheckConnectionReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckConnectionReq> _instance;
} _CheckConnectionReq_default_instance_;
class CheckConnectionRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckConnectionResp> _instance;
} _CheckConnectionResp_default_instance_;
class RegistrationReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegistrationReq> _instance;
} _RegistrationReq_default_instance_;
class RegistrationRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RegistrationResp> _instance;
} _RegistrationResp_default_instance_;
class FaceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FaceInfo> _instance;
} _FaceInfo_default_instance_;
class JSReqDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JSReq> _instance;
} _JSReq_default_instance_;
class JSRespDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<JSResp> _instance;
} _JSResp_default_instance_;
class UnlabeledFaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UnlabeledFace> _instance;
} _UnlabeledFace_default_instance_;
class LabeledFaceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LabeledFace> _instance;
} _LabeledFace_default_instance_;
}  // namespace multiple_camera_server
static void InitDefaultsscc_info_CheckConnectionReq_multiple_5fcamera_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multiple_camera_server::_CheckConnectionReq_default_instance_;
    new (ptr) ::multiple_camera_server::CheckConnectionReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multiple_camera_server::CheckConnectionReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckConnectionReq_multiple_5fcamera_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckConnectionReq_multiple_5fcamera_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_CheckConnectionResp_multiple_5fcamera_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multiple_camera_server::_CheckConnectionResp_default_instance_;
    new (ptr) ::multiple_camera_server::CheckConnectionResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multiple_camera_server::CheckConnectionResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckConnectionResp_multiple_5fcamera_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckConnectionResp_multiple_5fcamera_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_FaceInfo_multiple_5fcamera_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multiple_camera_server::_FaceInfo_default_instance_;
    new (ptr) ::multiple_camera_server::FaceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multiple_camera_server::FaceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FaceInfo_multiple_5fcamera_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FaceInfo_multiple_5fcamera_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_JSReq_multiple_5fcamera_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multiple_camera_server::_JSReq_default_instance_;
    new (ptr) ::multiple_camera_server::JSReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multiple_camera_server::JSReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JSReq_multiple_5fcamera_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JSReq_multiple_5fcamera_5fserver_2eproto}, {
      &scc_info_UnlabeledFace_multiple_5fcamera_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_JSResp_multiple_5fcamera_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multiple_camera_server::_JSResp_default_instance_;
    new (ptr) ::multiple_camera_server::JSResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multiple_camera_server::JSResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_JSResp_multiple_5fcamera_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_JSResp_multiple_5fcamera_5fserver_2eproto}, {
      &scc_info_LabeledFace_multiple_5fcamera_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_LabeledFace_multiple_5fcamera_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multiple_camera_server::_LabeledFace_default_instance_;
    new (ptr) ::multiple_camera_server::LabeledFace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multiple_camera_server::LabeledFace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LabeledFace_multiple_5fcamera_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LabeledFace_multiple_5fcamera_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_RegistrationReq_multiple_5fcamera_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multiple_camera_server::_RegistrationReq_default_instance_;
    new (ptr) ::multiple_camera_server::RegistrationReq();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multiple_camera_server::RegistrationReq::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RegistrationReq_multiple_5fcamera_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RegistrationReq_multiple_5fcamera_5fserver_2eproto}, {}};

static void InitDefaultsscc_info_RegistrationResp_multiple_5fcamera_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multiple_camera_server::_RegistrationResp_default_instance_;
    new (ptr) ::multiple_camera_server::RegistrationResp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multiple_camera_server::RegistrationResp::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RegistrationResp_multiple_5fcamera_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RegistrationResp_multiple_5fcamera_5fserver_2eproto}, {
      &scc_info_FaceInfo_multiple_5fcamera_5fserver_2eproto.base,}};

static void InitDefaultsscc_info_UnlabeledFace_multiple_5fcamera_5fserver_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::multiple_camera_server::_UnlabeledFace_default_instance_;
    new (ptr) ::multiple_camera_server::UnlabeledFace();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::multiple_camera_server::UnlabeledFace::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UnlabeledFace_multiple_5fcamera_5fserver_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UnlabeledFace_multiple_5fcamera_5fserver_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_multiple_5fcamera_5fserver_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_multiple_5fcamera_5fserver_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_multiple_5fcamera_5fserver_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_multiple_5fcamera_5fserver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::CheckConnectionReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::CheckConnectionResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::CheckConnectionResp, connection_response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::RegistrationReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::RegistrationReq, image_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::RegistrationResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::RegistrationResp, face_infos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::FaceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::FaceInfo, bbox_),
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::FaceInfo, feature_vector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::JSReq, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::JSReq, faces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::JSResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::JSResp, faces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::UnlabeledFace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::UnlabeledFace, track_id_),
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::UnlabeledFace, image_bytes_),
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::UnlabeledFace, landmarks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::LabeledFace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::LabeledFace, track_id_),
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::LabeledFace, registration_id_),
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::LabeledFace, person_name_),
  PROTOBUF_FIELD_OFFSET(::multiple_camera_server::LabeledFace, confidence_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::multiple_camera_server::CheckConnectionReq)},
  { 5, -1, sizeof(::multiple_camera_server::CheckConnectionResp)},
  { 11, -1, sizeof(::multiple_camera_server::RegistrationReq)},
  { 17, -1, sizeof(::multiple_camera_server::RegistrationResp)},
  { 23, -1, sizeof(::multiple_camera_server::FaceInfo)},
  { 30, -1, sizeof(::multiple_camera_server::JSReq)},
  { 36, -1, sizeof(::multiple_camera_server::JSResp)},
  { 42, -1, sizeof(::multiple_camera_server::UnlabeledFace)},
  { 50, -1, sizeof(::multiple_camera_server::LabeledFace)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multiple_camera_server::_CheckConnectionReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multiple_camera_server::_CheckConnectionResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multiple_camera_server::_RegistrationReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multiple_camera_server::_RegistrationResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multiple_camera_server::_FaceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multiple_camera_server::_JSReq_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multiple_camera_server::_JSResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multiple_camera_server::_UnlabeledFace_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::multiple_camera_server::_LabeledFace_default_instance_),
};

const char descriptor_table_protodef_multiple_5fcamera_5fserver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034multiple_camera_server.proto\022\026multiple"
  "_camera_server\"\024\n\022CheckConnectionReq\"2\n\023"
  "CheckConnectionResp\022\033\n\023connection_respon"
  "se\030\001 \001(\t\"&\n\017RegistrationReq\022\023\n\013image_byt"
  "es\030\001 \003(\014\"H\n\020RegistrationResp\0224\n\nface_inf"
  "os\030\001 \003(\0132 .multiple_camera_server.FaceIn"
  "fo\"0\n\010FaceInfo\022\014\n\004bbox\030\001 \003(\005\022\026\n\016feature_"
  "vector\030\002 \001(\014\"=\n\005JSReq\0224\n\005faces\030\001 \003(\0132%.m"
  "ultiple_camera_server.UnlabeledFace\"<\n\006J"
  "SResp\0222\n\005faces\030\001 \003(\0132#.multiple_camera_s"
  "erver.LabeledFace\"I\n\rUnlabeledFace\022\020\n\010tr"
  "ack_id\030\001 \001(\t\022\023\n\013image_bytes\030\002 \001(\014\022\021\n\tlan"
  "dmarks\030\003 \003(\005\"a\n\013LabeledFace\022\020\n\010track_id\030"
  "\001 \001(\t\022\027\n\017registration_id\030\002 \001(\t\022\023\n\013person"
  "_name\030\003 \001(\t\022\022\n\nconfidence\030\004 \001(\0022\301\002\n\016Face"
  "Processing\022f\n\017register_images\022\'.multiple"
  "_camera_server.RegistrationReq\032(.multipl"
  "e_camera_server.RegistrationResp\"\000\022X\n\021re"
  "cognize_face_js\022\035.multiple_camera_server"
  ".JSReq\032\036.multiple_camera_server.JSResp\"\000"
  "(\0010\001\022m\n\020check_connection\022*.multiple_came"
  "ra_server.CheckConnectionReq\032+.multiple_"
  "camera_server.CheckConnectionResp\"\000b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_multiple_5fcamera_5fserver_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_multiple_5fcamera_5fserver_2eproto_sccs[9] = {
  &scc_info_CheckConnectionReq_multiple_5fcamera_5fserver_2eproto.base,
  &scc_info_CheckConnectionResp_multiple_5fcamera_5fserver_2eproto.base,
  &scc_info_FaceInfo_multiple_5fcamera_5fserver_2eproto.base,
  &scc_info_JSReq_multiple_5fcamera_5fserver_2eproto.base,
  &scc_info_JSResp_multiple_5fcamera_5fserver_2eproto.base,
  &scc_info_LabeledFace_multiple_5fcamera_5fserver_2eproto.base,
  &scc_info_RegistrationReq_multiple_5fcamera_5fserver_2eproto.base,
  &scc_info_RegistrationResp_multiple_5fcamera_5fserver_2eproto.base,
  &scc_info_UnlabeledFace_multiple_5fcamera_5fserver_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_multiple_5fcamera_5fserver_2eproto_once;
static bool descriptor_table_multiple_5fcamera_5fserver_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_multiple_5fcamera_5fserver_2eproto = {
  &descriptor_table_multiple_5fcamera_5fserver_2eproto_initialized, descriptor_table_protodef_multiple_5fcamera_5fserver_2eproto, "multiple_camera_server.proto", 923,
  &descriptor_table_multiple_5fcamera_5fserver_2eproto_once, descriptor_table_multiple_5fcamera_5fserver_2eproto_sccs, descriptor_table_multiple_5fcamera_5fserver_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_multiple_5fcamera_5fserver_2eproto::offsets,
  file_level_metadata_multiple_5fcamera_5fserver_2eproto, 9, file_level_enum_descriptors_multiple_5fcamera_5fserver_2eproto, file_level_service_descriptors_multiple_5fcamera_5fserver_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_multiple_5fcamera_5fserver_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_multiple_5fcamera_5fserver_2eproto)), true);
namespace multiple_camera_server {

// ===================================================================

void CheckConnectionReq::InitAsDefaultInstance() {
}
class CheckConnectionReq::_Internal {
 public:
};

CheckConnectionReq::CheckConnectionReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:multiple_camera_server.CheckConnectionReq)
}
CheckConnectionReq::CheckConnectionReq(const CheckConnectionReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:multiple_camera_server.CheckConnectionReq)
}

void CheckConnectionReq::SharedCtor() {
}

CheckConnectionReq::~CheckConnectionReq() {
  // @@protoc_insertion_point(destructor:multiple_camera_server.CheckConnectionReq)
  SharedDtor();
}

void CheckConnectionReq::SharedDtor() {
}

void CheckConnectionReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckConnectionReq& CheckConnectionReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckConnectionReq_multiple_5fcamera_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CheckConnectionReq::Clear() {
// @@protoc_insertion_point(message_clear_start:multiple_camera_server.CheckConnectionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* CheckConnectionReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckConnectionReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multiple_camera_server.CheckConnectionReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multiple_camera_server.CheckConnectionReq)
  return target;
}

size_t CheckConnectionReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multiple_camera_server.CheckConnectionReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckConnectionReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multiple_camera_server.CheckConnectionReq)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckConnectionReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckConnectionReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multiple_camera_server.CheckConnectionReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multiple_camera_server.CheckConnectionReq)
    MergeFrom(*source);
  }
}

void CheckConnectionReq::MergeFrom(const CheckConnectionReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multiple_camera_server.CheckConnectionReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void CheckConnectionReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multiple_camera_server.CheckConnectionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckConnectionReq::CopyFrom(const CheckConnectionReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multiple_camera_server.CheckConnectionReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckConnectionReq::IsInitialized() const {
  return true;
}

void CheckConnectionReq::InternalSwap(CheckConnectionReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckConnectionReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckConnectionResp::InitAsDefaultInstance() {
}
class CheckConnectionResp::_Internal {
 public:
};

CheckConnectionResp::CheckConnectionResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:multiple_camera_server.CheckConnectionResp)
}
CheckConnectionResp::CheckConnectionResp(const CheckConnectionResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  connection_response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_connection_response().empty()) {
    connection_response_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.connection_response_);
  }
  // @@protoc_insertion_point(copy_constructor:multiple_camera_server.CheckConnectionResp)
}

void CheckConnectionResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckConnectionResp_multiple_5fcamera_5fserver_2eproto.base);
  connection_response_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CheckConnectionResp::~CheckConnectionResp() {
  // @@protoc_insertion_point(destructor:multiple_camera_server.CheckConnectionResp)
  SharedDtor();
}

void CheckConnectionResp::SharedDtor() {
  connection_response_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CheckConnectionResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckConnectionResp& CheckConnectionResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckConnectionResp_multiple_5fcamera_5fserver_2eproto.base);
  return *internal_default_instance();
}


void CheckConnectionResp::Clear() {
// @@protoc_insertion_point(message_clear_start:multiple_camera_server.CheckConnectionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connection_response_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* CheckConnectionResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string connection_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_connection_response();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multiple_camera_server.CheckConnectionResp.connection_response"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckConnectionResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multiple_camera_server.CheckConnectionResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string connection_response = 1;
  if (this->connection_response().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_connection_response().data(), static_cast<int>(this->_internal_connection_response().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multiple_camera_server.CheckConnectionResp.connection_response");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_connection_response(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multiple_camera_server.CheckConnectionResp)
  return target;
}

size_t CheckConnectionResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multiple_camera_server.CheckConnectionResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string connection_response = 1;
  if (this->connection_response().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_connection_response());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckConnectionResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multiple_camera_server.CheckConnectionResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckConnectionResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckConnectionResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multiple_camera_server.CheckConnectionResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multiple_camera_server.CheckConnectionResp)
    MergeFrom(*source);
  }
}

void CheckConnectionResp::MergeFrom(const CheckConnectionResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multiple_camera_server.CheckConnectionResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.connection_response().size() > 0) {

    connection_response_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.connection_response_);
  }
}

void CheckConnectionResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multiple_camera_server.CheckConnectionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckConnectionResp::CopyFrom(const CheckConnectionResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multiple_camera_server.CheckConnectionResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckConnectionResp::IsInitialized() const {
  return true;
}

void CheckConnectionResp::InternalSwap(CheckConnectionResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  connection_response_.Swap(&other->connection_response_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckConnectionResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegistrationReq::InitAsDefaultInstance() {
}
class RegistrationReq::_Internal {
 public:
};

RegistrationReq::RegistrationReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:multiple_camera_server.RegistrationReq)
}
RegistrationReq::RegistrationReq(const RegistrationReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      image_bytes_(from.image_bytes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:multiple_camera_server.RegistrationReq)
}

void RegistrationReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegistrationReq_multiple_5fcamera_5fserver_2eproto.base);
}

RegistrationReq::~RegistrationReq() {
  // @@protoc_insertion_point(destructor:multiple_camera_server.RegistrationReq)
  SharedDtor();
}

void RegistrationReq::SharedDtor() {
}

void RegistrationReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegistrationReq& RegistrationReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegistrationReq_multiple_5fcamera_5fserver_2eproto.base);
  return *internal_default_instance();
}


void RegistrationReq::Clear() {
// @@protoc_insertion_point(message_clear_start:multiple_camera_server.RegistrationReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_bytes_.Clear();
  _internal_metadata_.Clear();
}

const char* RegistrationReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated bytes image_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_image_bytes();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegistrationReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multiple_camera_server.RegistrationReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated bytes image_bytes = 1;
  for (int i = 0, n = this->_internal_image_bytes_size(); i < n; i++) {
    const auto& s = this->_internal_image_bytes(i);
    target = stream->WriteBytes(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multiple_camera_server.RegistrationReq)
  return target;
}

size_t RegistrationReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multiple_camera_server.RegistrationReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes image_bytes = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(image_bytes_.size());
  for (int i = 0, n = image_bytes_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
      image_bytes_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegistrationReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multiple_camera_server.RegistrationReq)
  GOOGLE_DCHECK_NE(&from, this);
  const RegistrationReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegistrationReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multiple_camera_server.RegistrationReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multiple_camera_server.RegistrationReq)
    MergeFrom(*source);
  }
}

void RegistrationReq::MergeFrom(const RegistrationReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multiple_camera_server.RegistrationReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  image_bytes_.MergeFrom(from.image_bytes_);
}

void RegistrationReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multiple_camera_server.RegistrationReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistrationReq::CopyFrom(const RegistrationReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multiple_camera_server.RegistrationReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationReq::IsInitialized() const {
  return true;
}

void RegistrationReq::InternalSwap(RegistrationReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  image_bytes_.InternalSwap(&other->image_bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistrationReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RegistrationResp::InitAsDefaultInstance() {
}
class RegistrationResp::_Internal {
 public:
};

RegistrationResp::RegistrationResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:multiple_camera_server.RegistrationResp)
}
RegistrationResp::RegistrationResp(const RegistrationResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      face_infos_(from.face_infos_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:multiple_camera_server.RegistrationResp)
}

void RegistrationResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RegistrationResp_multiple_5fcamera_5fserver_2eproto.base);
}

RegistrationResp::~RegistrationResp() {
  // @@protoc_insertion_point(destructor:multiple_camera_server.RegistrationResp)
  SharedDtor();
}

void RegistrationResp::SharedDtor() {
}

void RegistrationResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RegistrationResp& RegistrationResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RegistrationResp_multiple_5fcamera_5fserver_2eproto.base);
  return *internal_default_instance();
}


void RegistrationResp::Clear() {
// @@protoc_insertion_point(message_clear_start:multiple_camera_server.RegistrationResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  face_infos_.Clear();
  _internal_metadata_.Clear();
}

const char* RegistrationResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .multiple_camera_server.FaceInfo face_infos = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_face_infos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RegistrationResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multiple_camera_server.RegistrationResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .multiple_camera_server.FaceInfo face_infos = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_face_infos_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_face_infos(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multiple_camera_server.RegistrationResp)
  return target;
}

size_t RegistrationResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multiple_camera_server.RegistrationResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .multiple_camera_server.FaceInfo face_infos = 1;
  total_size += 1UL * this->_internal_face_infos_size();
  for (const auto& msg : this->face_infos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RegistrationResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multiple_camera_server.RegistrationResp)
  GOOGLE_DCHECK_NE(&from, this);
  const RegistrationResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RegistrationResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multiple_camera_server.RegistrationResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multiple_camera_server.RegistrationResp)
    MergeFrom(*source);
  }
}

void RegistrationResp::MergeFrom(const RegistrationResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multiple_camera_server.RegistrationResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  face_infos_.MergeFrom(from.face_infos_);
}

void RegistrationResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multiple_camera_server.RegistrationResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegistrationResp::CopyFrom(const RegistrationResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multiple_camera_server.RegistrationResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegistrationResp::IsInitialized() const {
  return true;
}

void RegistrationResp::InternalSwap(RegistrationResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  face_infos_.InternalSwap(&other->face_infos_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegistrationResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FaceInfo::InitAsDefaultInstance() {
}
class FaceInfo::_Internal {
 public:
};

FaceInfo::FaceInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:multiple_camera_server.FaceInfo)
}
FaceInfo::FaceInfo(const FaceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bbox_(from.bbox_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  feature_vector_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_feature_vector().empty()) {
    feature_vector_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.feature_vector_);
  }
  // @@protoc_insertion_point(copy_constructor:multiple_camera_server.FaceInfo)
}

void FaceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FaceInfo_multiple_5fcamera_5fserver_2eproto.base);
  feature_vector_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FaceInfo::~FaceInfo() {
  // @@protoc_insertion_point(destructor:multiple_camera_server.FaceInfo)
  SharedDtor();
}

void FaceInfo::SharedDtor() {
  feature_vector_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FaceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FaceInfo& FaceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FaceInfo_multiple_5fcamera_5fserver_2eproto.base);
  return *internal_default_instance();
}


void FaceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:multiple_camera_server.FaceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bbox_.Clear();
  feature_vector_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FaceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 bbox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bbox(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_bbox(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes feature_vector = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_feature_vector();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FaceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multiple_camera_server.FaceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 bbox = 1;
  {
    int byte_size = _bbox_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_bbox(), byte_size, target);
    }
  }

  // bytes feature_vector = 2;
  if (this->feature_vector().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_feature_vector(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multiple_camera_server.FaceInfo)
  return target;
}

size_t FaceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multiple_camera_server.FaceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bbox = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bbox_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bbox_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes feature_vector = 2;
  if (this->feature_vector().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_feature_vector());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FaceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multiple_camera_server.FaceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FaceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FaceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multiple_camera_server.FaceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multiple_camera_server.FaceInfo)
    MergeFrom(*source);
  }
}

void FaceInfo::MergeFrom(const FaceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multiple_camera_server.FaceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bbox_.MergeFrom(from.bbox_);
  if (from.feature_vector().size() > 0) {

    feature_vector_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.feature_vector_);
  }
}

void FaceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multiple_camera_server.FaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaceInfo::CopyFrom(const FaceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multiple_camera_server.FaceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceInfo::IsInitialized() const {
  return true;
}

void FaceInfo::InternalSwap(FaceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bbox_.InternalSwap(&other->bbox_);
  feature_vector_.Swap(&other->feature_vector_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JSReq::InitAsDefaultInstance() {
}
class JSReq::_Internal {
 public:
};

JSReq::JSReq()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:multiple_camera_server.JSReq)
}
JSReq::JSReq(const JSReq& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      faces_(from.faces_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:multiple_camera_server.JSReq)
}

void JSReq::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JSReq_multiple_5fcamera_5fserver_2eproto.base);
}

JSReq::~JSReq() {
  // @@protoc_insertion_point(destructor:multiple_camera_server.JSReq)
  SharedDtor();
}

void JSReq::SharedDtor() {
}

void JSReq::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JSReq& JSReq::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JSReq_multiple_5fcamera_5fserver_2eproto.base);
  return *internal_default_instance();
}


void JSReq::Clear() {
// @@protoc_insertion_point(message_clear_start:multiple_camera_server.JSReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  faces_.Clear();
  _internal_metadata_.Clear();
}

const char* JSReq::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .multiple_camera_server.UnlabeledFace faces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_faces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JSReq::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multiple_camera_server.JSReq)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .multiple_camera_server.UnlabeledFace faces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_faces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_faces(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multiple_camera_server.JSReq)
  return target;
}

size_t JSReq::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multiple_camera_server.JSReq)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .multiple_camera_server.UnlabeledFace faces = 1;
  total_size += 1UL * this->_internal_faces_size();
  for (const auto& msg : this->faces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JSReq::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multiple_camera_server.JSReq)
  GOOGLE_DCHECK_NE(&from, this);
  const JSReq* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JSReq>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multiple_camera_server.JSReq)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multiple_camera_server.JSReq)
    MergeFrom(*source);
  }
}

void JSReq::MergeFrom(const JSReq& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multiple_camera_server.JSReq)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  faces_.MergeFrom(from.faces_);
}

void JSReq::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multiple_camera_server.JSReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JSReq::CopyFrom(const JSReq& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multiple_camera_server.JSReq)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JSReq::IsInitialized() const {
  return true;
}

void JSReq::InternalSwap(JSReq* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  faces_.InternalSwap(&other->faces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JSReq::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void JSResp::InitAsDefaultInstance() {
}
class JSResp::_Internal {
 public:
};

JSResp::JSResp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:multiple_camera_server.JSResp)
}
JSResp::JSResp(const JSResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      faces_(from.faces_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:multiple_camera_server.JSResp)
}

void JSResp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_JSResp_multiple_5fcamera_5fserver_2eproto.base);
}

JSResp::~JSResp() {
  // @@protoc_insertion_point(destructor:multiple_camera_server.JSResp)
  SharedDtor();
}

void JSResp::SharedDtor() {
}

void JSResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const JSResp& JSResp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_JSResp_multiple_5fcamera_5fserver_2eproto.base);
  return *internal_default_instance();
}


void JSResp::Clear() {
// @@protoc_insertion_point(message_clear_start:multiple_camera_server.JSResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  faces_.Clear();
  _internal_metadata_.Clear();
}

const char* JSResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .multiple_camera_server.LabeledFace faces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_faces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* JSResp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multiple_camera_server.JSResp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .multiple_camera_server.LabeledFace faces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_faces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_faces(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multiple_camera_server.JSResp)
  return target;
}

size_t JSResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multiple_camera_server.JSResp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .multiple_camera_server.LabeledFace faces = 1;
  total_size += 1UL * this->_internal_faces_size();
  for (const auto& msg : this->faces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JSResp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multiple_camera_server.JSResp)
  GOOGLE_DCHECK_NE(&from, this);
  const JSResp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<JSResp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multiple_camera_server.JSResp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multiple_camera_server.JSResp)
    MergeFrom(*source);
  }
}

void JSResp::MergeFrom(const JSResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multiple_camera_server.JSResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  faces_.MergeFrom(from.faces_);
}

void JSResp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multiple_camera_server.JSResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JSResp::CopyFrom(const JSResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multiple_camera_server.JSResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JSResp::IsInitialized() const {
  return true;
}

void JSResp::InternalSwap(JSResp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  faces_.InternalSwap(&other->faces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata JSResp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UnlabeledFace::InitAsDefaultInstance() {
}
class UnlabeledFace::_Internal {
 public:
};

UnlabeledFace::UnlabeledFace()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:multiple_camera_server.UnlabeledFace)
}
UnlabeledFace::UnlabeledFace(const UnlabeledFace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      landmarks_(from.landmarks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  track_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_track_id().empty()) {
    track_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.track_id_);
  }
  image_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_bytes().empty()) {
    image_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_bytes_);
  }
  // @@protoc_insertion_point(copy_constructor:multiple_camera_server.UnlabeledFace)
}

void UnlabeledFace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UnlabeledFace_multiple_5fcamera_5fserver_2eproto.base);
  track_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_bytes_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UnlabeledFace::~UnlabeledFace() {
  // @@protoc_insertion_point(destructor:multiple_camera_server.UnlabeledFace)
  SharedDtor();
}

void UnlabeledFace::SharedDtor() {
  track_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_bytes_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UnlabeledFace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UnlabeledFace& UnlabeledFace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UnlabeledFace_multiple_5fcamera_5fserver_2eproto.base);
  return *internal_default_instance();
}


void UnlabeledFace::Clear() {
// @@protoc_insertion_point(message_clear_start:multiple_camera_server.UnlabeledFace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  landmarks_.Clear();
  track_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* UnlabeledFace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string track_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_track_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multiple_camera_server.UnlabeledFace.track_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes image_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_image_bytes();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 landmarks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_landmarks(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_landmarks(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UnlabeledFace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multiple_camera_server.UnlabeledFace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string track_id = 1;
  if (this->track_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_id().data(), static_cast<int>(this->_internal_track_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multiple_camera_server.UnlabeledFace.track_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_track_id(), target);
  }

  // bytes image_bytes = 2;
  if (this->image_bytes().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image_bytes(), target);
  }

  // repeated int32 landmarks = 3;
  {
    int byte_size = _landmarks_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_landmarks(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multiple_camera_server.UnlabeledFace)
  return target;
}

size_t UnlabeledFace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multiple_camera_server.UnlabeledFace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 landmarks = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->landmarks_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _landmarks_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string track_id = 1;
  if (this->track_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_id());
  }

  // bytes image_bytes = 2;
  if (this->image_bytes().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UnlabeledFace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multiple_camera_server.UnlabeledFace)
  GOOGLE_DCHECK_NE(&from, this);
  const UnlabeledFace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UnlabeledFace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multiple_camera_server.UnlabeledFace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multiple_camera_server.UnlabeledFace)
    MergeFrom(*source);
  }
}

void UnlabeledFace::MergeFrom(const UnlabeledFace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multiple_camera_server.UnlabeledFace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  landmarks_.MergeFrom(from.landmarks_);
  if (from.track_id().size() > 0) {

    track_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.track_id_);
  }
  if (from.image_bytes().size() > 0) {

    image_bytes_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.image_bytes_);
  }
}

void UnlabeledFace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multiple_camera_server.UnlabeledFace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnlabeledFace::CopyFrom(const UnlabeledFace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multiple_camera_server.UnlabeledFace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnlabeledFace::IsInitialized() const {
  return true;
}

void UnlabeledFace::InternalSwap(UnlabeledFace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  landmarks_.InternalSwap(&other->landmarks_);
  track_id_.Swap(&other->track_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  image_bytes_.Swap(&other->image_bytes_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UnlabeledFace::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LabeledFace::InitAsDefaultInstance() {
}
class LabeledFace::_Internal {
 public:
};

LabeledFace::LabeledFace()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:multiple_camera_server.LabeledFace)
}
LabeledFace::LabeledFace(const LabeledFace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  track_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_track_id().empty()) {
    track_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.track_id_);
  }
  registration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_registration_id().empty()) {
    registration_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.registration_id_);
  }
  person_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_person_name().empty()) {
    person_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.person_name_);
  }
  confidence_ = from.confidence_;
  // @@protoc_insertion_point(copy_constructor:multiple_camera_server.LabeledFace)
}

void LabeledFace::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LabeledFace_multiple_5fcamera_5fserver_2eproto.base);
  track_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  registration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  person_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
}

LabeledFace::~LabeledFace() {
  // @@protoc_insertion_point(destructor:multiple_camera_server.LabeledFace)
  SharedDtor();
}

void LabeledFace::SharedDtor() {
  track_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  registration_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  person_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LabeledFace::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LabeledFace& LabeledFace::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LabeledFace_multiple_5fcamera_5fserver_2eproto.base);
  return *internal_default_instance();
}


void LabeledFace::Clear() {
// @@protoc_insertion_point(message_clear_start:multiple_camera_server.LabeledFace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  track_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  registration_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  person_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  confidence_ = 0;
  _internal_metadata_.Clear();
}

const char* LabeledFace::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string track_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_track_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multiple_camera_server.LabeledFace.track_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string registration_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_registration_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multiple_camera_server.LabeledFace.registration_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string person_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_person_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "multiple_camera_server.LabeledFace.person_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float confidence = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LabeledFace::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:multiple_camera_server.LabeledFace)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string track_id = 1;
  if (this->track_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_track_id().data(), static_cast<int>(this->_internal_track_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multiple_camera_server.LabeledFace.track_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_track_id(), target);
  }

  // string registration_id = 2;
  if (this->registration_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_registration_id().data(), static_cast<int>(this->_internal_registration_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multiple_camera_server.LabeledFace.registration_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_registration_id(), target);
  }

  // string person_name = 3;
  if (this->person_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_person_name().data(), static_cast<int>(this->_internal_person_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "multiple_camera_server.LabeledFace.person_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_person_name(), target);
  }

  // float confidence = 4;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_confidence(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:multiple_camera_server.LabeledFace)
  return target;
}

size_t LabeledFace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:multiple_camera_server.LabeledFace)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string track_id = 1;
  if (this->track_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_track_id());
  }

  // string registration_id = 2;
  if (this->registration_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_registration_id());
  }

  // string person_name = 3;
  if (this->person_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_person_name());
  }

  // float confidence = 4;
  if (!(this->confidence() <= 0 && this->confidence() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LabeledFace::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:multiple_camera_server.LabeledFace)
  GOOGLE_DCHECK_NE(&from, this);
  const LabeledFace* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LabeledFace>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:multiple_camera_server.LabeledFace)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:multiple_camera_server.LabeledFace)
    MergeFrom(*source);
  }
}

void LabeledFace::MergeFrom(const LabeledFace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:multiple_camera_server.LabeledFace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.track_id().size() > 0) {

    track_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.track_id_);
  }
  if (from.registration_id().size() > 0) {

    registration_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.registration_id_);
  }
  if (from.person_name().size() > 0) {

    person_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.person_name_);
  }
  if (!(from.confidence() <= 0 && from.confidence() >= 0)) {
    _internal_set_confidence(from._internal_confidence());
  }
}

void LabeledFace::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:multiple_camera_server.LabeledFace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LabeledFace::CopyFrom(const LabeledFace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:multiple_camera_server.LabeledFace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LabeledFace::IsInitialized() const {
  return true;
}

void LabeledFace::InternalSwap(LabeledFace* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  track_id_.Swap(&other->track_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  registration_id_.Swap(&other->registration_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  person_name_.Swap(&other->person_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(confidence_, other->confidence_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LabeledFace::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace multiple_camera_server
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::multiple_camera_server::CheckConnectionReq* Arena::CreateMaybeMessage< ::multiple_camera_server::CheckConnectionReq >(Arena* arena) {
  return Arena::CreateInternal< ::multiple_camera_server::CheckConnectionReq >(arena);
}
template<> PROTOBUF_NOINLINE ::multiple_camera_server::CheckConnectionResp* Arena::CreateMaybeMessage< ::multiple_camera_server::CheckConnectionResp >(Arena* arena) {
  return Arena::CreateInternal< ::multiple_camera_server::CheckConnectionResp >(arena);
}
template<> PROTOBUF_NOINLINE ::multiple_camera_server::RegistrationReq* Arena::CreateMaybeMessage< ::multiple_camera_server::RegistrationReq >(Arena* arena) {
  return Arena::CreateInternal< ::multiple_camera_server::RegistrationReq >(arena);
}
template<> PROTOBUF_NOINLINE ::multiple_camera_server::RegistrationResp* Arena::CreateMaybeMessage< ::multiple_camera_server::RegistrationResp >(Arena* arena) {
  return Arena::CreateInternal< ::multiple_camera_server::RegistrationResp >(arena);
}
template<> PROTOBUF_NOINLINE ::multiple_camera_server::FaceInfo* Arena::CreateMaybeMessage< ::multiple_camera_server::FaceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::multiple_camera_server::FaceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::multiple_camera_server::JSReq* Arena::CreateMaybeMessage< ::multiple_camera_server::JSReq >(Arena* arena) {
  return Arena::CreateInternal< ::multiple_camera_server::JSReq >(arena);
}
template<> PROTOBUF_NOINLINE ::multiple_camera_server::JSResp* Arena::CreateMaybeMessage< ::multiple_camera_server::JSResp >(Arena* arena) {
  return Arena::CreateInternal< ::multiple_camera_server::JSResp >(arena);
}
template<> PROTOBUF_NOINLINE ::multiple_camera_server::UnlabeledFace* Arena::CreateMaybeMessage< ::multiple_camera_server::UnlabeledFace >(Arena* arena) {
  return Arena::CreateInternal< ::multiple_camera_server::UnlabeledFace >(arena);
}
template<> PROTOBUF_NOINLINE ::multiple_camera_server::LabeledFace* Arena::CreateMaybeMessage< ::multiple_camera_server::LabeledFace >(Arena* arena) {
  return Arena::CreateInternal< ::multiple_camera_server::LabeledFace >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
