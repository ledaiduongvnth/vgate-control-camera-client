// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: multiple_camera_server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_multiple_5fcamera_5fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_multiple_5fcamera_5fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_multiple_5fcamera_5fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_multiple_5fcamera_5fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_multiple_5fcamera_5fserver_2eproto;
namespace multiple_camera_server {
class CheckConnectionReq;
class CheckConnectionReqDefaultTypeInternal;
extern CheckConnectionReqDefaultTypeInternal _CheckConnectionReq_default_instance_;
class CheckConnectionResp;
class CheckConnectionRespDefaultTypeInternal;
extern CheckConnectionRespDefaultTypeInternal _CheckConnectionResp_default_instance_;
class FaceInfo;
class FaceInfoDefaultTypeInternal;
extern FaceInfoDefaultTypeInternal _FaceInfo_default_instance_;
class JSReq;
class JSReqDefaultTypeInternal;
extern JSReqDefaultTypeInternal _JSReq_default_instance_;
class JSResp;
class JSRespDefaultTypeInternal;
extern JSRespDefaultTypeInternal _JSResp_default_instance_;
class LabeledFace;
class LabeledFaceDefaultTypeInternal;
extern LabeledFaceDefaultTypeInternal _LabeledFace_default_instance_;
class RegistrationReq;
class RegistrationReqDefaultTypeInternal;
extern RegistrationReqDefaultTypeInternal _RegistrationReq_default_instance_;
class RegistrationResp;
class RegistrationRespDefaultTypeInternal;
extern RegistrationRespDefaultTypeInternal _RegistrationResp_default_instance_;
class UnlabeledFace;
class UnlabeledFaceDefaultTypeInternal;
extern UnlabeledFaceDefaultTypeInternal _UnlabeledFace_default_instance_;
}  // namespace multiple_camera_server
PROTOBUF_NAMESPACE_OPEN
template<> ::multiple_camera_server::CheckConnectionReq* Arena::CreateMaybeMessage<::multiple_camera_server::CheckConnectionReq>(Arena*);
template<> ::multiple_camera_server::CheckConnectionResp* Arena::CreateMaybeMessage<::multiple_camera_server::CheckConnectionResp>(Arena*);
template<> ::multiple_camera_server::FaceInfo* Arena::CreateMaybeMessage<::multiple_camera_server::FaceInfo>(Arena*);
template<> ::multiple_camera_server::JSReq* Arena::CreateMaybeMessage<::multiple_camera_server::JSReq>(Arena*);
template<> ::multiple_camera_server::JSResp* Arena::CreateMaybeMessage<::multiple_camera_server::JSResp>(Arena*);
template<> ::multiple_camera_server::LabeledFace* Arena::CreateMaybeMessage<::multiple_camera_server::LabeledFace>(Arena*);
template<> ::multiple_camera_server::RegistrationReq* Arena::CreateMaybeMessage<::multiple_camera_server::RegistrationReq>(Arena*);
template<> ::multiple_camera_server::RegistrationResp* Arena::CreateMaybeMessage<::multiple_camera_server::RegistrationResp>(Arena*);
template<> ::multiple_camera_server::UnlabeledFace* Arena::CreateMaybeMessage<::multiple_camera_server::UnlabeledFace>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace multiple_camera_server {

// ===================================================================

class CheckConnectionReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multiple_camera_server.CheckConnectionReq) */ {
 public:
  CheckConnectionReq();
  virtual ~CheckConnectionReq();

  CheckConnectionReq(const CheckConnectionReq& from);
  CheckConnectionReq(CheckConnectionReq&& from) noexcept
    : CheckConnectionReq() {
    *this = ::std::move(from);
  }

  inline CheckConnectionReq& operator=(const CheckConnectionReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckConnectionReq& operator=(CheckConnectionReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckConnectionReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckConnectionReq* internal_default_instance() {
    return reinterpret_cast<const CheckConnectionReq*>(
               &_CheckConnectionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CheckConnectionReq& a, CheckConnectionReq& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckConnectionReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckConnectionReq* New() const final {
    return CreateMaybeMessage<CheckConnectionReq>(nullptr);
  }

  CheckConnectionReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckConnectionReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckConnectionReq& from);
  void MergeFrom(const CheckConnectionReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckConnectionReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multiple_camera_server.CheckConnectionReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_multiple_5fcamera_5fserver_2eproto);
    return ::descriptor_table_multiple_5fcamera_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:multiple_camera_server.CheckConnectionReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_multiple_5fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class CheckConnectionResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multiple_camera_server.CheckConnectionResp) */ {
 public:
  CheckConnectionResp();
  virtual ~CheckConnectionResp();

  CheckConnectionResp(const CheckConnectionResp& from);
  CheckConnectionResp(CheckConnectionResp&& from) noexcept
    : CheckConnectionResp() {
    *this = ::std::move(from);
  }

  inline CheckConnectionResp& operator=(const CheckConnectionResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckConnectionResp& operator=(CheckConnectionResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckConnectionResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckConnectionResp* internal_default_instance() {
    return reinterpret_cast<const CheckConnectionResp*>(
               &_CheckConnectionResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CheckConnectionResp& a, CheckConnectionResp& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckConnectionResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckConnectionResp* New() const final {
    return CreateMaybeMessage<CheckConnectionResp>(nullptr);
  }

  CheckConnectionResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckConnectionResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckConnectionResp& from);
  void MergeFrom(const CheckConnectionResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckConnectionResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multiple_camera_server.CheckConnectionResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_multiple_5fcamera_5fserver_2eproto);
    return ::descriptor_table_multiple_5fcamera_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionResponseFieldNumber = 1,
  };
  // string connection_response = 1;
  void clear_connection_response();
  const std::string& connection_response() const;
  void set_connection_response(const std::string& value);
  void set_connection_response(std::string&& value);
  void set_connection_response(const char* value);
  void set_connection_response(const char* value, size_t size);
  std::string* mutable_connection_response();
  std::string* release_connection_response();
  void set_allocated_connection_response(std::string* connection_response);
  private:
  const std::string& _internal_connection_response() const;
  void _internal_set_connection_response(const std::string& value);
  std::string* _internal_mutable_connection_response();
  public:

  // @@protoc_insertion_point(class_scope:multiple_camera_server.CheckConnectionResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr connection_response_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_multiple_5fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RegistrationReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multiple_camera_server.RegistrationReq) */ {
 public:
  RegistrationReq();
  virtual ~RegistrationReq();

  RegistrationReq(const RegistrationReq& from);
  RegistrationReq(RegistrationReq&& from) noexcept
    : RegistrationReq() {
    *this = ::std::move(from);
  }

  inline RegistrationReq& operator=(const RegistrationReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegistrationReq& operator=(RegistrationReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegistrationReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegistrationReq* internal_default_instance() {
    return reinterpret_cast<const RegistrationReq*>(
               &_RegistrationReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegistrationReq& a, RegistrationReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RegistrationReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegistrationReq* New() const final {
    return CreateMaybeMessage<RegistrationReq>(nullptr);
  }

  RegistrationReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegistrationReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegistrationReq& from);
  void MergeFrom(const RegistrationReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegistrationReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multiple_camera_server.RegistrationReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_multiple_5fcamera_5fserver_2eproto);
    return ::descriptor_table_multiple_5fcamera_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageBytesFieldNumber = 1,
  };
  // repeated bytes image_bytes = 1;
  int image_bytes_size() const;
  private:
  int _internal_image_bytes_size() const;
  public:
  void clear_image_bytes();
  const std::string& image_bytes(int index) const;
  std::string* mutable_image_bytes(int index);
  void set_image_bytes(int index, const std::string& value);
  void set_image_bytes(int index, std::string&& value);
  void set_image_bytes(int index, const char* value);
  void set_image_bytes(int index, const void* value, size_t size);
  std::string* add_image_bytes();
  void add_image_bytes(const std::string& value);
  void add_image_bytes(std::string&& value);
  void add_image_bytes(const char* value);
  void add_image_bytes(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& image_bytes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_image_bytes();
  private:
  const std::string& _internal_image_bytes(int index) const;
  std::string* _internal_add_image_bytes();
  public:

  // @@protoc_insertion_point(class_scope:multiple_camera_server.RegistrationReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> image_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_multiple_5fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class RegistrationResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multiple_camera_server.RegistrationResp) */ {
 public:
  RegistrationResp();
  virtual ~RegistrationResp();

  RegistrationResp(const RegistrationResp& from);
  RegistrationResp(RegistrationResp&& from) noexcept
    : RegistrationResp() {
    *this = ::std::move(from);
  }

  inline RegistrationResp& operator=(const RegistrationResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegistrationResp& operator=(RegistrationResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RegistrationResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegistrationResp* internal_default_instance() {
    return reinterpret_cast<const RegistrationResp*>(
               &_RegistrationResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegistrationResp& a, RegistrationResp& b) {
    a.Swap(&b);
  }
  inline void Swap(RegistrationResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RegistrationResp* New() const final {
    return CreateMaybeMessage<RegistrationResp>(nullptr);
  }

  RegistrationResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RegistrationResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RegistrationResp& from);
  void MergeFrom(const RegistrationResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegistrationResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multiple_camera_server.RegistrationResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_multiple_5fcamera_5fserver_2eproto);
    return ::descriptor_table_multiple_5fcamera_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFaceInfosFieldNumber = 1,
  };
  // repeated .multiple_camera_server.FaceInfo face_infos = 1;
  int face_infos_size() const;
  private:
  int _internal_face_infos_size() const;
  public:
  void clear_face_infos();
  ::multiple_camera_server::FaceInfo* mutable_face_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multiple_camera_server::FaceInfo >*
      mutable_face_infos();
  private:
  const ::multiple_camera_server::FaceInfo& _internal_face_infos(int index) const;
  ::multiple_camera_server::FaceInfo* _internal_add_face_infos();
  public:
  const ::multiple_camera_server::FaceInfo& face_infos(int index) const;
  ::multiple_camera_server::FaceInfo* add_face_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multiple_camera_server::FaceInfo >&
      face_infos() const;

  // @@protoc_insertion_point(class_scope:multiple_camera_server.RegistrationResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multiple_camera_server::FaceInfo > face_infos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_multiple_5fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class FaceInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multiple_camera_server.FaceInfo) */ {
 public:
  FaceInfo();
  virtual ~FaceInfo();

  FaceInfo(const FaceInfo& from);
  FaceInfo(FaceInfo&& from) noexcept
    : FaceInfo() {
    *this = ::std::move(from);
  }

  inline FaceInfo& operator=(const FaceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FaceInfo& operator=(FaceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FaceInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FaceInfo* internal_default_instance() {
    return reinterpret_cast<const FaceInfo*>(
               &_FaceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FaceInfo& a, FaceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FaceInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FaceInfo* New() const final {
    return CreateMaybeMessage<FaceInfo>(nullptr);
  }

  FaceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FaceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FaceInfo& from);
  void MergeFrom(const FaceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FaceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multiple_camera_server.FaceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_multiple_5fcamera_5fserver_2eproto);
    return ::descriptor_table_multiple_5fcamera_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBboxFieldNumber = 1,
    kFeatureVectorFieldNumber = 2,
  };
  // repeated int32 bbox = 1;
  int bbox_size() const;
  private:
  int _internal_bbox_size() const;
  public:
  void clear_bbox();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_bbox(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_bbox() const;
  void _internal_add_bbox(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_bbox();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 bbox(int index) const;
  void set_bbox(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_bbox(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      bbox() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_bbox();

  // bytes feature_vector = 2;
  void clear_feature_vector();
  const std::string& feature_vector() const;
  void set_feature_vector(const std::string& value);
  void set_feature_vector(std::string&& value);
  void set_feature_vector(const char* value);
  void set_feature_vector(const void* value, size_t size);
  std::string* mutable_feature_vector();
  std::string* release_feature_vector();
  void set_allocated_feature_vector(std::string* feature_vector);
  private:
  const std::string& _internal_feature_vector() const;
  void _internal_set_feature_vector(const std::string& value);
  std::string* _internal_mutable_feature_vector();
  public:

  // @@protoc_insertion_point(class_scope:multiple_camera_server.FaceInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > bbox_;
  mutable std::atomic<int> _bbox_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr feature_vector_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_multiple_5fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class JSReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multiple_camera_server.JSReq) */ {
 public:
  JSReq();
  virtual ~JSReq();

  JSReq(const JSReq& from);
  JSReq(JSReq&& from) noexcept
    : JSReq() {
    *this = ::std::move(from);
  }

  inline JSReq& operator=(const JSReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline JSReq& operator=(JSReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JSReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JSReq* internal_default_instance() {
    return reinterpret_cast<const JSReq*>(
               &_JSReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(JSReq& a, JSReq& b) {
    a.Swap(&b);
  }
  inline void Swap(JSReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JSReq* New() const final {
    return CreateMaybeMessage<JSReq>(nullptr);
  }

  JSReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JSReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JSReq& from);
  void MergeFrom(const JSReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JSReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multiple_camera_server.JSReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_multiple_5fcamera_5fserver_2eproto);
    return ::descriptor_table_multiple_5fcamera_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFacesFieldNumber = 1,
  };
  // repeated .multiple_camera_server.UnlabeledFace faces = 1;
  int faces_size() const;
  private:
  int _internal_faces_size() const;
  public:
  void clear_faces();
  ::multiple_camera_server::UnlabeledFace* mutable_faces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multiple_camera_server::UnlabeledFace >*
      mutable_faces();
  private:
  const ::multiple_camera_server::UnlabeledFace& _internal_faces(int index) const;
  ::multiple_camera_server::UnlabeledFace* _internal_add_faces();
  public:
  const ::multiple_camera_server::UnlabeledFace& faces(int index) const;
  ::multiple_camera_server::UnlabeledFace* add_faces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multiple_camera_server::UnlabeledFace >&
      faces() const;

  // @@protoc_insertion_point(class_scope:multiple_camera_server.JSReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multiple_camera_server::UnlabeledFace > faces_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_multiple_5fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class JSResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multiple_camera_server.JSResp) */ {
 public:
  JSResp();
  virtual ~JSResp();

  JSResp(const JSResp& from);
  JSResp(JSResp&& from) noexcept
    : JSResp() {
    *this = ::std::move(from);
  }

  inline JSResp& operator=(const JSResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline JSResp& operator=(JSResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const JSResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JSResp* internal_default_instance() {
    return reinterpret_cast<const JSResp*>(
               &_JSResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(JSResp& a, JSResp& b) {
    a.Swap(&b);
  }
  inline void Swap(JSResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline JSResp* New() const final {
    return CreateMaybeMessage<JSResp>(nullptr);
  }

  JSResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<JSResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const JSResp& from);
  void MergeFrom(const JSResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JSResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multiple_camera_server.JSResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_multiple_5fcamera_5fserver_2eproto);
    return ::descriptor_table_multiple_5fcamera_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFacesFieldNumber = 1,
  };
  // repeated .multiple_camera_server.LabeledFace faces = 1;
  int faces_size() const;
  private:
  int _internal_faces_size() const;
  public:
  void clear_faces();
  ::multiple_camera_server::LabeledFace* mutable_faces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multiple_camera_server::LabeledFace >*
      mutable_faces();
  private:
  const ::multiple_camera_server::LabeledFace& _internal_faces(int index) const;
  ::multiple_camera_server::LabeledFace* _internal_add_faces();
  public:
  const ::multiple_camera_server::LabeledFace& faces(int index) const;
  ::multiple_camera_server::LabeledFace* add_faces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multiple_camera_server::LabeledFace >&
      faces() const;

  // @@protoc_insertion_point(class_scope:multiple_camera_server.JSResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multiple_camera_server::LabeledFace > faces_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_multiple_5fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class UnlabeledFace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multiple_camera_server.UnlabeledFace) */ {
 public:
  UnlabeledFace();
  virtual ~UnlabeledFace();

  UnlabeledFace(const UnlabeledFace& from);
  UnlabeledFace(UnlabeledFace&& from) noexcept
    : UnlabeledFace() {
    *this = ::std::move(from);
  }

  inline UnlabeledFace& operator=(const UnlabeledFace& from) {
    CopyFrom(from);
    return *this;
  }
  inline UnlabeledFace& operator=(UnlabeledFace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UnlabeledFace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UnlabeledFace* internal_default_instance() {
    return reinterpret_cast<const UnlabeledFace*>(
               &_UnlabeledFace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UnlabeledFace& a, UnlabeledFace& b) {
    a.Swap(&b);
  }
  inline void Swap(UnlabeledFace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UnlabeledFace* New() const final {
    return CreateMaybeMessage<UnlabeledFace>(nullptr);
  }

  UnlabeledFace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UnlabeledFace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UnlabeledFace& from);
  void MergeFrom(const UnlabeledFace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UnlabeledFace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multiple_camera_server.UnlabeledFace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_multiple_5fcamera_5fserver_2eproto);
    return ::descriptor_table_multiple_5fcamera_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLandmarksFieldNumber = 3,
    kTrackIdFieldNumber = 1,
    kImageBytesFieldNumber = 2,
  };
  // repeated int32 landmarks = 3;
  int landmarks_size() const;
  private:
  int _internal_landmarks_size() const;
  public:
  void clear_landmarks();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_landmarks(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_landmarks() const;
  void _internal_add_landmarks(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_landmarks();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 landmarks(int index) const;
  void set_landmarks(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_landmarks(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      landmarks() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_landmarks();

  // string track_id = 1;
  void clear_track_id();
  const std::string& track_id() const;
  void set_track_id(const std::string& value);
  void set_track_id(std::string&& value);
  void set_track_id(const char* value);
  void set_track_id(const char* value, size_t size);
  std::string* mutable_track_id();
  std::string* release_track_id();
  void set_allocated_track_id(std::string* track_id);
  private:
  const std::string& _internal_track_id() const;
  void _internal_set_track_id(const std::string& value);
  std::string* _internal_mutable_track_id();
  public:

  // bytes image_bytes = 2;
  void clear_image_bytes();
  const std::string& image_bytes() const;
  void set_image_bytes(const std::string& value);
  void set_image_bytes(std::string&& value);
  void set_image_bytes(const char* value);
  void set_image_bytes(const void* value, size_t size);
  std::string* mutable_image_bytes();
  std::string* release_image_bytes();
  void set_allocated_image_bytes(std::string* image_bytes);
  private:
  const std::string& _internal_image_bytes() const;
  void _internal_set_image_bytes(const std::string& value);
  std::string* _internal_mutable_image_bytes();
  public:

  // @@protoc_insertion_point(class_scope:multiple_camera_server.UnlabeledFace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > landmarks_;
  mutable std::atomic<int> _landmarks_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr track_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_bytes_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_multiple_5fcamera_5fserver_2eproto;
};
// -------------------------------------------------------------------

class LabeledFace :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:multiple_camera_server.LabeledFace) */ {
 public:
  LabeledFace();
  virtual ~LabeledFace();

  LabeledFace(const LabeledFace& from);
  LabeledFace(LabeledFace&& from) noexcept
    : LabeledFace() {
    *this = ::std::move(from);
  }

  inline LabeledFace& operator=(const LabeledFace& from) {
    CopyFrom(from);
    return *this;
  }
  inline LabeledFace& operator=(LabeledFace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LabeledFace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LabeledFace* internal_default_instance() {
    return reinterpret_cast<const LabeledFace*>(
               &_LabeledFace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LabeledFace& a, LabeledFace& b) {
    a.Swap(&b);
  }
  inline void Swap(LabeledFace* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LabeledFace* New() const final {
    return CreateMaybeMessage<LabeledFace>(nullptr);
  }

  LabeledFace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LabeledFace>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LabeledFace& from);
  void MergeFrom(const LabeledFace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LabeledFace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "multiple_camera_server.LabeledFace";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_multiple_5fcamera_5fserver_2eproto);
    return ::descriptor_table_multiple_5fcamera_5fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackIdFieldNumber = 1,
    kRegistrationIdFieldNumber = 2,
    kPersonNameFieldNumber = 3,
    kConfidenceFieldNumber = 4,
  };
  // string track_id = 1;
  void clear_track_id();
  const std::string& track_id() const;
  void set_track_id(const std::string& value);
  void set_track_id(std::string&& value);
  void set_track_id(const char* value);
  void set_track_id(const char* value, size_t size);
  std::string* mutable_track_id();
  std::string* release_track_id();
  void set_allocated_track_id(std::string* track_id);
  private:
  const std::string& _internal_track_id() const;
  void _internal_set_track_id(const std::string& value);
  std::string* _internal_mutable_track_id();
  public:

  // string registration_id = 2;
  void clear_registration_id();
  const std::string& registration_id() const;
  void set_registration_id(const std::string& value);
  void set_registration_id(std::string&& value);
  void set_registration_id(const char* value);
  void set_registration_id(const char* value, size_t size);
  std::string* mutable_registration_id();
  std::string* release_registration_id();
  void set_allocated_registration_id(std::string* registration_id);
  private:
  const std::string& _internal_registration_id() const;
  void _internal_set_registration_id(const std::string& value);
  std::string* _internal_mutable_registration_id();
  public:

  // string person_name = 3;
  void clear_person_name();
  const std::string& person_name() const;
  void set_person_name(const std::string& value);
  void set_person_name(std::string&& value);
  void set_person_name(const char* value);
  void set_person_name(const char* value, size_t size);
  std::string* mutable_person_name();
  std::string* release_person_name();
  void set_allocated_person_name(std::string* person_name);
  private:
  const std::string& _internal_person_name() const;
  void _internal_set_person_name(const std::string& value);
  std::string* _internal_mutable_person_name();
  public:

  // float confidence = 4;
  void clear_confidence();
  float confidence() const;
  void set_confidence(float value);
  private:
  float _internal_confidence() const;
  void _internal_set_confidence(float value);
  public:

  // @@protoc_insertion_point(class_scope:multiple_camera_server.LabeledFace)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr track_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr registration_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr person_name_;
  float confidence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_multiple_5fcamera_5fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckConnectionReq

// -------------------------------------------------------------------

// CheckConnectionResp

// string connection_response = 1;
inline void CheckConnectionResp::clear_connection_response() {
  connection_response_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& CheckConnectionResp::connection_response() const {
  // @@protoc_insertion_point(field_get:multiple_camera_server.CheckConnectionResp.connection_response)
  return _internal_connection_response();
}
inline void CheckConnectionResp::set_connection_response(const std::string& value) {
  _internal_set_connection_response(value);
  // @@protoc_insertion_point(field_set:multiple_camera_server.CheckConnectionResp.connection_response)
}
inline std::string* CheckConnectionResp::mutable_connection_response() {
  // @@protoc_insertion_point(field_mutable:multiple_camera_server.CheckConnectionResp.connection_response)
  return _internal_mutable_connection_response();
}
inline const std::string& CheckConnectionResp::_internal_connection_response() const {
  return connection_response_.GetNoArena();
}
inline void CheckConnectionResp::_internal_set_connection_response(const std::string& value) {
  
  connection_response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void CheckConnectionResp::set_connection_response(std::string&& value) {
  
  connection_response_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:multiple_camera_server.CheckConnectionResp.connection_response)
}
inline void CheckConnectionResp::set_connection_response(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  connection_response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:multiple_camera_server.CheckConnectionResp.connection_response)
}
inline void CheckConnectionResp::set_connection_response(const char* value, size_t size) {
  
  connection_response_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:multiple_camera_server.CheckConnectionResp.connection_response)
}
inline std::string* CheckConnectionResp::_internal_mutable_connection_response() {
  
  return connection_response_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* CheckConnectionResp::release_connection_response() {
  // @@protoc_insertion_point(field_release:multiple_camera_server.CheckConnectionResp.connection_response)
  
  return connection_response_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void CheckConnectionResp::set_allocated_connection_response(std::string* connection_response) {
  if (connection_response != nullptr) {
    
  } else {
    
  }
  connection_response_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), connection_response);
  // @@protoc_insertion_point(field_set_allocated:multiple_camera_server.CheckConnectionResp.connection_response)
}

// -------------------------------------------------------------------

// RegistrationReq

// repeated bytes image_bytes = 1;
inline int RegistrationReq::_internal_image_bytes_size() const {
  return image_bytes_.size();
}
inline int RegistrationReq::image_bytes_size() const {
  return _internal_image_bytes_size();
}
inline void RegistrationReq::clear_image_bytes() {
  image_bytes_.Clear();
}
inline std::string* RegistrationReq::add_image_bytes() {
  // @@protoc_insertion_point(field_add_mutable:multiple_camera_server.RegistrationReq.image_bytes)
  return _internal_add_image_bytes();
}
inline const std::string& RegistrationReq::_internal_image_bytes(int index) const {
  return image_bytes_.Get(index);
}
inline const std::string& RegistrationReq::image_bytes(int index) const {
  // @@protoc_insertion_point(field_get:multiple_camera_server.RegistrationReq.image_bytes)
  return _internal_image_bytes(index);
}
inline std::string* RegistrationReq::mutable_image_bytes(int index) {
  // @@protoc_insertion_point(field_mutable:multiple_camera_server.RegistrationReq.image_bytes)
  return image_bytes_.Mutable(index);
}
inline void RegistrationReq::set_image_bytes(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:multiple_camera_server.RegistrationReq.image_bytes)
  image_bytes_.Mutable(index)->assign(value);
}
inline void RegistrationReq::set_image_bytes(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:multiple_camera_server.RegistrationReq.image_bytes)
  image_bytes_.Mutable(index)->assign(std::move(value));
}
inline void RegistrationReq::set_image_bytes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  image_bytes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:multiple_camera_server.RegistrationReq.image_bytes)
}
inline void RegistrationReq::set_image_bytes(int index, const void* value, size_t size) {
  image_bytes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:multiple_camera_server.RegistrationReq.image_bytes)
}
inline std::string* RegistrationReq::_internal_add_image_bytes() {
  return image_bytes_.Add();
}
inline void RegistrationReq::add_image_bytes(const std::string& value) {
  image_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:multiple_camera_server.RegistrationReq.image_bytes)
}
inline void RegistrationReq::add_image_bytes(std::string&& value) {
  image_bytes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:multiple_camera_server.RegistrationReq.image_bytes)
}
inline void RegistrationReq::add_image_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  image_bytes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:multiple_camera_server.RegistrationReq.image_bytes)
}
inline void RegistrationReq::add_image_bytes(const void* value, size_t size) {
  image_bytes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:multiple_camera_server.RegistrationReq.image_bytes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
RegistrationReq::image_bytes() const {
  // @@protoc_insertion_point(field_list:multiple_camera_server.RegistrationReq.image_bytes)
  return image_bytes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
RegistrationReq::mutable_image_bytes() {
  // @@protoc_insertion_point(field_mutable_list:multiple_camera_server.RegistrationReq.image_bytes)
  return &image_bytes_;
}

// -------------------------------------------------------------------

// RegistrationResp

// repeated .multiple_camera_server.FaceInfo face_infos = 1;
inline int RegistrationResp::_internal_face_infos_size() const {
  return face_infos_.size();
}
inline int RegistrationResp::face_infos_size() const {
  return _internal_face_infos_size();
}
inline void RegistrationResp::clear_face_infos() {
  face_infos_.Clear();
}
inline ::multiple_camera_server::FaceInfo* RegistrationResp::mutable_face_infos(int index) {
  // @@protoc_insertion_point(field_mutable:multiple_camera_server.RegistrationResp.face_infos)
  return face_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multiple_camera_server::FaceInfo >*
RegistrationResp::mutable_face_infos() {
  // @@protoc_insertion_point(field_mutable_list:multiple_camera_server.RegistrationResp.face_infos)
  return &face_infos_;
}
inline const ::multiple_camera_server::FaceInfo& RegistrationResp::_internal_face_infos(int index) const {
  return face_infos_.Get(index);
}
inline const ::multiple_camera_server::FaceInfo& RegistrationResp::face_infos(int index) const {
  // @@protoc_insertion_point(field_get:multiple_camera_server.RegistrationResp.face_infos)
  return _internal_face_infos(index);
}
inline ::multiple_camera_server::FaceInfo* RegistrationResp::_internal_add_face_infos() {
  return face_infos_.Add();
}
inline ::multiple_camera_server::FaceInfo* RegistrationResp::add_face_infos() {
  // @@protoc_insertion_point(field_add:multiple_camera_server.RegistrationResp.face_infos)
  return _internal_add_face_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multiple_camera_server::FaceInfo >&
RegistrationResp::face_infos() const {
  // @@protoc_insertion_point(field_list:multiple_camera_server.RegistrationResp.face_infos)
  return face_infos_;
}

// -------------------------------------------------------------------

// FaceInfo

// repeated int32 bbox = 1;
inline int FaceInfo::_internal_bbox_size() const {
  return bbox_.size();
}
inline int FaceInfo::bbox_size() const {
  return _internal_bbox_size();
}
inline void FaceInfo::clear_bbox() {
  bbox_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FaceInfo::_internal_bbox(int index) const {
  return bbox_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FaceInfo::bbox(int index) const {
  // @@protoc_insertion_point(field_get:multiple_camera_server.FaceInfo.bbox)
  return _internal_bbox(index);
}
inline void FaceInfo::set_bbox(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  bbox_.Set(index, value);
  // @@protoc_insertion_point(field_set:multiple_camera_server.FaceInfo.bbox)
}
inline void FaceInfo::_internal_add_bbox(::PROTOBUF_NAMESPACE_ID::int32 value) {
  bbox_.Add(value);
}
inline void FaceInfo::add_bbox(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_bbox(value);
  // @@protoc_insertion_point(field_add:multiple_camera_server.FaceInfo.bbox)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FaceInfo::_internal_bbox() const {
  return bbox_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
FaceInfo::bbox() const {
  // @@protoc_insertion_point(field_list:multiple_camera_server.FaceInfo.bbox)
  return _internal_bbox();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FaceInfo::_internal_mutable_bbox() {
  return &bbox_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
FaceInfo::mutable_bbox() {
  // @@protoc_insertion_point(field_mutable_list:multiple_camera_server.FaceInfo.bbox)
  return _internal_mutable_bbox();
}

// bytes feature_vector = 2;
inline void FaceInfo::clear_feature_vector() {
  feature_vector_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FaceInfo::feature_vector() const {
  // @@protoc_insertion_point(field_get:multiple_camera_server.FaceInfo.feature_vector)
  return _internal_feature_vector();
}
inline void FaceInfo::set_feature_vector(const std::string& value) {
  _internal_set_feature_vector(value);
  // @@protoc_insertion_point(field_set:multiple_camera_server.FaceInfo.feature_vector)
}
inline std::string* FaceInfo::mutable_feature_vector() {
  // @@protoc_insertion_point(field_mutable:multiple_camera_server.FaceInfo.feature_vector)
  return _internal_mutable_feature_vector();
}
inline const std::string& FaceInfo::_internal_feature_vector() const {
  return feature_vector_.GetNoArena();
}
inline void FaceInfo::_internal_set_feature_vector(const std::string& value) {
  
  feature_vector_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FaceInfo::set_feature_vector(std::string&& value) {
  
  feature_vector_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:multiple_camera_server.FaceInfo.feature_vector)
}
inline void FaceInfo::set_feature_vector(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  feature_vector_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:multiple_camera_server.FaceInfo.feature_vector)
}
inline void FaceInfo::set_feature_vector(const void* value, size_t size) {
  
  feature_vector_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:multiple_camera_server.FaceInfo.feature_vector)
}
inline std::string* FaceInfo::_internal_mutable_feature_vector() {
  
  return feature_vector_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FaceInfo::release_feature_vector() {
  // @@protoc_insertion_point(field_release:multiple_camera_server.FaceInfo.feature_vector)
  
  return feature_vector_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FaceInfo::set_allocated_feature_vector(std::string* feature_vector) {
  if (feature_vector != nullptr) {
    
  } else {
    
  }
  feature_vector_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), feature_vector);
  // @@protoc_insertion_point(field_set_allocated:multiple_camera_server.FaceInfo.feature_vector)
}

// -------------------------------------------------------------------

// JSReq

// repeated .multiple_camera_server.UnlabeledFace faces = 1;
inline int JSReq::_internal_faces_size() const {
  return faces_.size();
}
inline int JSReq::faces_size() const {
  return _internal_faces_size();
}
inline void JSReq::clear_faces() {
  faces_.Clear();
}
inline ::multiple_camera_server::UnlabeledFace* JSReq::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:multiple_camera_server.JSReq.faces)
  return faces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multiple_camera_server::UnlabeledFace >*
JSReq::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:multiple_camera_server.JSReq.faces)
  return &faces_;
}
inline const ::multiple_camera_server::UnlabeledFace& JSReq::_internal_faces(int index) const {
  return faces_.Get(index);
}
inline const ::multiple_camera_server::UnlabeledFace& JSReq::faces(int index) const {
  // @@protoc_insertion_point(field_get:multiple_camera_server.JSReq.faces)
  return _internal_faces(index);
}
inline ::multiple_camera_server::UnlabeledFace* JSReq::_internal_add_faces() {
  return faces_.Add();
}
inline ::multiple_camera_server::UnlabeledFace* JSReq::add_faces() {
  // @@protoc_insertion_point(field_add:multiple_camera_server.JSReq.faces)
  return _internal_add_faces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multiple_camera_server::UnlabeledFace >&
JSReq::faces() const {
  // @@protoc_insertion_point(field_list:multiple_camera_server.JSReq.faces)
  return faces_;
}

// -------------------------------------------------------------------

// JSResp

// repeated .multiple_camera_server.LabeledFace faces = 1;
inline int JSResp::_internal_faces_size() const {
  return faces_.size();
}
inline int JSResp::faces_size() const {
  return _internal_faces_size();
}
inline void JSResp::clear_faces() {
  faces_.Clear();
}
inline ::multiple_camera_server::LabeledFace* JSResp::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:multiple_camera_server.JSResp.faces)
  return faces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multiple_camera_server::LabeledFace >*
JSResp::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:multiple_camera_server.JSResp.faces)
  return &faces_;
}
inline const ::multiple_camera_server::LabeledFace& JSResp::_internal_faces(int index) const {
  return faces_.Get(index);
}
inline const ::multiple_camera_server::LabeledFace& JSResp::faces(int index) const {
  // @@protoc_insertion_point(field_get:multiple_camera_server.JSResp.faces)
  return _internal_faces(index);
}
inline ::multiple_camera_server::LabeledFace* JSResp::_internal_add_faces() {
  return faces_.Add();
}
inline ::multiple_camera_server::LabeledFace* JSResp::add_faces() {
  // @@protoc_insertion_point(field_add:multiple_camera_server.JSResp.faces)
  return _internal_add_faces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::multiple_camera_server::LabeledFace >&
JSResp::faces() const {
  // @@protoc_insertion_point(field_list:multiple_camera_server.JSResp.faces)
  return faces_;
}

// -------------------------------------------------------------------

// UnlabeledFace

// string track_id = 1;
inline void UnlabeledFace::clear_track_id() {
  track_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UnlabeledFace::track_id() const {
  // @@protoc_insertion_point(field_get:multiple_camera_server.UnlabeledFace.track_id)
  return _internal_track_id();
}
inline void UnlabeledFace::set_track_id(const std::string& value) {
  _internal_set_track_id(value);
  // @@protoc_insertion_point(field_set:multiple_camera_server.UnlabeledFace.track_id)
}
inline std::string* UnlabeledFace::mutable_track_id() {
  // @@protoc_insertion_point(field_mutable:multiple_camera_server.UnlabeledFace.track_id)
  return _internal_mutable_track_id();
}
inline const std::string& UnlabeledFace::_internal_track_id() const {
  return track_id_.GetNoArena();
}
inline void UnlabeledFace::_internal_set_track_id(const std::string& value) {
  
  track_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UnlabeledFace::set_track_id(std::string&& value) {
  
  track_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:multiple_camera_server.UnlabeledFace.track_id)
}
inline void UnlabeledFace::set_track_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  track_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:multiple_camera_server.UnlabeledFace.track_id)
}
inline void UnlabeledFace::set_track_id(const char* value, size_t size) {
  
  track_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:multiple_camera_server.UnlabeledFace.track_id)
}
inline std::string* UnlabeledFace::_internal_mutable_track_id() {
  
  return track_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UnlabeledFace::release_track_id() {
  // @@protoc_insertion_point(field_release:multiple_camera_server.UnlabeledFace.track_id)
  
  return track_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UnlabeledFace::set_allocated_track_id(std::string* track_id) {
  if (track_id != nullptr) {
    
  } else {
    
  }
  track_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), track_id);
  // @@protoc_insertion_point(field_set_allocated:multiple_camera_server.UnlabeledFace.track_id)
}

// bytes image_bytes = 2;
inline void UnlabeledFace::clear_image_bytes() {
  image_bytes_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UnlabeledFace::image_bytes() const {
  // @@protoc_insertion_point(field_get:multiple_camera_server.UnlabeledFace.image_bytes)
  return _internal_image_bytes();
}
inline void UnlabeledFace::set_image_bytes(const std::string& value) {
  _internal_set_image_bytes(value);
  // @@protoc_insertion_point(field_set:multiple_camera_server.UnlabeledFace.image_bytes)
}
inline std::string* UnlabeledFace::mutable_image_bytes() {
  // @@protoc_insertion_point(field_mutable:multiple_camera_server.UnlabeledFace.image_bytes)
  return _internal_mutable_image_bytes();
}
inline const std::string& UnlabeledFace::_internal_image_bytes() const {
  return image_bytes_.GetNoArena();
}
inline void UnlabeledFace::_internal_set_image_bytes(const std::string& value) {
  
  image_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UnlabeledFace::set_image_bytes(std::string&& value) {
  
  image_bytes_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:multiple_camera_server.UnlabeledFace.image_bytes)
}
inline void UnlabeledFace::set_image_bytes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:multiple_camera_server.UnlabeledFace.image_bytes)
}
inline void UnlabeledFace::set_image_bytes(const void* value, size_t size) {
  
  image_bytes_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:multiple_camera_server.UnlabeledFace.image_bytes)
}
inline std::string* UnlabeledFace::_internal_mutable_image_bytes() {
  
  return image_bytes_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UnlabeledFace::release_image_bytes() {
  // @@protoc_insertion_point(field_release:multiple_camera_server.UnlabeledFace.image_bytes)
  
  return image_bytes_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UnlabeledFace::set_allocated_image_bytes(std::string* image_bytes) {
  if (image_bytes != nullptr) {
    
  } else {
    
  }
  image_bytes_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_bytes);
  // @@protoc_insertion_point(field_set_allocated:multiple_camera_server.UnlabeledFace.image_bytes)
}

// repeated int32 landmarks = 3;
inline int UnlabeledFace::_internal_landmarks_size() const {
  return landmarks_.size();
}
inline int UnlabeledFace::landmarks_size() const {
  return _internal_landmarks_size();
}
inline void UnlabeledFace::clear_landmarks() {
  landmarks_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnlabeledFace::_internal_landmarks(int index) const {
  return landmarks_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 UnlabeledFace::landmarks(int index) const {
  // @@protoc_insertion_point(field_get:multiple_camera_server.UnlabeledFace.landmarks)
  return _internal_landmarks(index);
}
inline void UnlabeledFace::set_landmarks(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  landmarks_.Set(index, value);
  // @@protoc_insertion_point(field_set:multiple_camera_server.UnlabeledFace.landmarks)
}
inline void UnlabeledFace::_internal_add_landmarks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  landmarks_.Add(value);
}
inline void UnlabeledFace::add_landmarks(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_landmarks(value);
  // @@protoc_insertion_point(field_add:multiple_camera_server.UnlabeledFace.landmarks)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UnlabeledFace::_internal_landmarks() const {
  return landmarks_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
UnlabeledFace::landmarks() const {
  // @@protoc_insertion_point(field_list:multiple_camera_server.UnlabeledFace.landmarks)
  return _internal_landmarks();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UnlabeledFace::_internal_mutable_landmarks() {
  return &landmarks_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
UnlabeledFace::mutable_landmarks() {
  // @@protoc_insertion_point(field_mutable_list:multiple_camera_server.UnlabeledFace.landmarks)
  return _internal_mutable_landmarks();
}

// -------------------------------------------------------------------

// LabeledFace

// string track_id = 1;
inline void LabeledFace::clear_track_id() {
  track_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LabeledFace::track_id() const {
  // @@protoc_insertion_point(field_get:multiple_camera_server.LabeledFace.track_id)
  return _internal_track_id();
}
inline void LabeledFace::set_track_id(const std::string& value) {
  _internal_set_track_id(value);
  // @@protoc_insertion_point(field_set:multiple_camera_server.LabeledFace.track_id)
}
inline std::string* LabeledFace::mutable_track_id() {
  // @@protoc_insertion_point(field_mutable:multiple_camera_server.LabeledFace.track_id)
  return _internal_mutable_track_id();
}
inline const std::string& LabeledFace::_internal_track_id() const {
  return track_id_.GetNoArena();
}
inline void LabeledFace::_internal_set_track_id(const std::string& value) {
  
  track_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LabeledFace::set_track_id(std::string&& value) {
  
  track_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:multiple_camera_server.LabeledFace.track_id)
}
inline void LabeledFace::set_track_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  track_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:multiple_camera_server.LabeledFace.track_id)
}
inline void LabeledFace::set_track_id(const char* value, size_t size) {
  
  track_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:multiple_camera_server.LabeledFace.track_id)
}
inline std::string* LabeledFace::_internal_mutable_track_id() {
  
  return track_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LabeledFace::release_track_id() {
  // @@protoc_insertion_point(field_release:multiple_camera_server.LabeledFace.track_id)
  
  return track_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LabeledFace::set_allocated_track_id(std::string* track_id) {
  if (track_id != nullptr) {
    
  } else {
    
  }
  track_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), track_id);
  // @@protoc_insertion_point(field_set_allocated:multiple_camera_server.LabeledFace.track_id)
}

// string registration_id = 2;
inline void LabeledFace::clear_registration_id() {
  registration_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LabeledFace::registration_id() const {
  // @@protoc_insertion_point(field_get:multiple_camera_server.LabeledFace.registration_id)
  return _internal_registration_id();
}
inline void LabeledFace::set_registration_id(const std::string& value) {
  _internal_set_registration_id(value);
  // @@protoc_insertion_point(field_set:multiple_camera_server.LabeledFace.registration_id)
}
inline std::string* LabeledFace::mutable_registration_id() {
  // @@protoc_insertion_point(field_mutable:multiple_camera_server.LabeledFace.registration_id)
  return _internal_mutable_registration_id();
}
inline const std::string& LabeledFace::_internal_registration_id() const {
  return registration_id_.GetNoArena();
}
inline void LabeledFace::_internal_set_registration_id(const std::string& value) {
  
  registration_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LabeledFace::set_registration_id(std::string&& value) {
  
  registration_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:multiple_camera_server.LabeledFace.registration_id)
}
inline void LabeledFace::set_registration_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  registration_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:multiple_camera_server.LabeledFace.registration_id)
}
inline void LabeledFace::set_registration_id(const char* value, size_t size) {
  
  registration_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:multiple_camera_server.LabeledFace.registration_id)
}
inline std::string* LabeledFace::_internal_mutable_registration_id() {
  
  return registration_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LabeledFace::release_registration_id() {
  // @@protoc_insertion_point(field_release:multiple_camera_server.LabeledFace.registration_id)
  
  return registration_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LabeledFace::set_allocated_registration_id(std::string* registration_id) {
  if (registration_id != nullptr) {
    
  } else {
    
  }
  registration_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), registration_id);
  // @@protoc_insertion_point(field_set_allocated:multiple_camera_server.LabeledFace.registration_id)
}

// string person_name = 3;
inline void LabeledFace::clear_person_name() {
  person_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LabeledFace::person_name() const {
  // @@protoc_insertion_point(field_get:multiple_camera_server.LabeledFace.person_name)
  return _internal_person_name();
}
inline void LabeledFace::set_person_name(const std::string& value) {
  _internal_set_person_name(value);
  // @@protoc_insertion_point(field_set:multiple_camera_server.LabeledFace.person_name)
}
inline std::string* LabeledFace::mutable_person_name() {
  // @@protoc_insertion_point(field_mutable:multiple_camera_server.LabeledFace.person_name)
  return _internal_mutable_person_name();
}
inline const std::string& LabeledFace::_internal_person_name() const {
  return person_name_.GetNoArena();
}
inline void LabeledFace::_internal_set_person_name(const std::string& value) {
  
  person_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LabeledFace::set_person_name(std::string&& value) {
  
  person_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:multiple_camera_server.LabeledFace.person_name)
}
inline void LabeledFace::set_person_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  person_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:multiple_camera_server.LabeledFace.person_name)
}
inline void LabeledFace::set_person_name(const char* value, size_t size) {
  
  person_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:multiple_camera_server.LabeledFace.person_name)
}
inline std::string* LabeledFace::_internal_mutable_person_name() {
  
  return person_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LabeledFace::release_person_name() {
  // @@protoc_insertion_point(field_release:multiple_camera_server.LabeledFace.person_name)
  
  return person_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LabeledFace::set_allocated_person_name(std::string* person_name) {
  if (person_name != nullptr) {
    
  } else {
    
  }
  person_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), person_name);
  // @@protoc_insertion_point(field_set_allocated:multiple_camera_server.LabeledFace.person_name)
}

// float confidence = 4;
inline void LabeledFace::clear_confidence() {
  confidence_ = 0;
}
inline float LabeledFace::_internal_confidence() const {
  return confidence_;
}
inline float LabeledFace::confidence() const {
  // @@protoc_insertion_point(field_get:multiple_camera_server.LabeledFace.confidence)
  return _internal_confidence();
}
inline void LabeledFace::_internal_set_confidence(float value) {
  
  confidence_ = value;
}
inline void LabeledFace::set_confidence(float value) {
  _internal_set_confidence(value);
  // @@protoc_insertion_point(field_set:multiple_camera_server.LabeledFace.confidence)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace multiple_camera_server

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_multiple_5fcamera_5fserver_2eproto
